name: CI/CD Pipeline for Task Manager

on:
  push:
    branches:
      - main  # Runs pipeline when changes are pushed to main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build JAR with Maven
        run: |
          cd task-manager
          mvn clean package -DskipTests  # Ensures the JAR is built

      - name: Run Tests
        run: |
          cd task-manager
          mvn test  # Run tests (uncomment to enable)

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build  # Ensures build completes before running

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build JAR with Maven (Ensure JAR exists)
        run: |
          cd task-manager
          mvn clean package -DskipTests  # Ensures JAR is created before Docker build

      - name: Docker Login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          cd task-manager
          docker build -t ${{ secrets.DOCKER_USERNAME }}/task-manager:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/task-manager:latest

  deploy-to-remote:
    name: Deploy to EC2
    runs-on: self-hosted  # Runs on the remote VM where Minikube is installed
    needs: docker-build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Pull Latest Docker Image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/task-manager:latest
          minikube image load ${{ secrets.DOCKER_USERNAME }}/task-manager:latest

      - name: Delete Old Deployment
        run: |
          kubectl delete deployment task-manager-deployment --ignore-not-found

      - name: Kubernetes Deployment
        run: |
          kubectl apply -f task-manager/k8s/

      - name: Verify Deployment
        run: |
          kubectl get pods
          kubectl get services
          kubectl get deployments

